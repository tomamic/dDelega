# Configuration file for example client program
#

# -------------------------------------------------------------
# --------------- GENERIC TrustBuilder2 Options ---------------
# -------------------------------------------------------------


# TrustBuilder2 root directory.  This should contain a trailing
# "/" (for unix and mac) or "\\" (for windows)
edu.uiuc.cs.TrustBuilder2.TrustBuilder2.root = .\\

# The properties file that log4j will use.  This is relative
# to the above root path
edu.uiuc.cs.TrustBuilder2.TrustBuilder2.log_config = src\\config\\log.properties

# The type of SecureRandom random number generator to use
edu.uiuc.cs.TrustBuilder2.TrustBuilder2.SecureRandom = SHA1PRNG

# A list of configuration options.  These are of the form:
#   <strategy module class>;<credential class 1>, ..., 
#   <credential class n>;<policy class 1>, ..., <policy class m>
# Note that the numbers after the "configuration_" must start
# with 1 and increment without skipping any numbers
edu.uiuc.cs.TrustBuilder2.TrustBuilder2.configuration_1 = \
  edu.uiuc.cs.TrustBuilder2.strategy.MaximumRelevantStrategy; \
  edu.uiuc.cs.TrustBuilder2.test.UncertifiedCredential; \
  edu.uiuc.cs.TrustBuilder2.compliance.jess.JessPolicyBrick



# ---------- IOManipulation Options start here ----------

# is the IOManipulationModule enabled?
edu.uiuc.cs.TrustBuilder2.IOManipulation.IOManipulationModule.enabled = false

# Which IOManipulators should be loaded by default?  This should
# be a comma-separated list of fully qualified class names
edu.uiuc.cs.TrustBuilder2.IOManipulation.IOManipulationModule.load = \
  edu.uiuc.cs.TrustBuilder2.IOManipulation.viz.VisualizationModule

# The following visualization/logging modules will be loaded at
# startup by the VisualizationModule.  The value for this key should
# be a comma separated list of fully- qualified class names.
edu.uiuc.cs.TrustBuilder2.IOManipulation.viz.VisualizationModule.load = \
  edu.uiuc.cs.TrustBuilder2.IOManipulation.viz.GuiVisualizer



# ---------- State management options start here ----------

# How long does an unused session last before it expires (in millis)?
edu.uiuc.cs.TrustBuilder2.state.SessionManager.expire = 3600000

# How often should we check for expired session objects (in millis)?
edu.uiuc.cs.TrustBuilder2.state.SessionManager.cleanup = 120000


# ---------- Strategy module keys go here ----------

# Stuff for the StrategyModuleMEdiator
#
# This key loads the "Maximum Relevant Strategy" supplied with
# TrustBuilder2.
#
edu.uiuc.cs.TrustBuilder2.strategy.StrategyModuleMediator.loadStrategies = \
  edu.uiuc.cs.TrustBuilder2.strategy.MaximumRelevantStrategy



# ---------- Credential chain processing keys start here ----------

# Keys for the CredentialChainMediator
#
# The first key loads a single credential chain verifier that verifies
# credential chains starting at the chain root and working down the
# chain to the leaf.  The second key loads a credential chain building
# plug-in.
#
edu.uiuc.cs.TrustBuilder2.verification.CredentialChainMediator.loadVerifiers = \
  edu.uiuc.cs.TrustBuilder2.verification.RootToLeafVerifier
edu.uiuc.cs.TrustBuilder2.verification.CredentialChainMediator.loadBuilders = \
  edu.uiuc.cs.TrustBuilder2.verification.SimpleChainBuilder



# ---------- Compliance checker keys start here ----------

# Keys for the ComplianceCheckerMediator
#
# The first key loads the compliance checker for the Clouseau
# language.  The second key is actually a key for that compliance
# checker that tells it where to locate the base definitions file
# discussed in Section 4 of the TrustBuilder2 user manual.
#
edu.uiuc.cs.TrustBuilder2.compliance.ComplianceCheckerMediator.loadComplianceCheckers = \
  edu.uiuc.cs.TrustBuilder2.compliance.jess.JessComplianceChecker
edu.uiuc.cs.TrustBuilder2.compliance.jess.JessComplianceChecker.baseDefinitions = \
  src\\config\\jess\\jess_defs.clp



# ---------- Query processing keys start here ----------

# Keys for the QueryEngineMediator.  This loads the ProfileManager
# and the PolicyManager
#
edu.uiuc.cs.TrustBuilder2.query.QueryEngineMediator.loadQueryEngines = \
  edu.uiuc.cs.TrustBuilder2.query.profile.ProfileManager, \
  edu.uiuc.cs.TrustBuilder2.query.policy.PolicyManager

# ProfileManager stuff.  
# 
# The first key sets the directory that the ProfileManager will scan
# for loader files.  The second key tells the ProfileManager to load
# plug-ins capable of pulling in uncertified credentials and uncertified
# claims from disk.
#
edu.uiuc.cs.TrustBuilder2.query.profile.ProfileManager.loaderFileDir = \
  src\\config\\client\\profile_loaders
edu.uiuc.cs.TrustBuilder2.query.profile.ProfileManager.loadLoaders = \
  edu.uiuc.cs.TrustBuilder2.query.profile.ClaimLoader, \
  edu.uiuc.cs.TrustBuilder2.test.UncertifiedCredentialLoader

# Policy Manager stuff
#
# Again, the first key tells the PolicyManager where to search for
# loader files.  The second key loads a plug-in that can read
# Clouseau policies from disk.
#
edu.uiuc.cs.TrustBuilder2.query.policy.PolicyManager.loaderFileDir = \
  src\\config\\client\\policy_loaders
edu.uiuc.cs.TrustBuilder2.query.policy.PolicyManager.loadLoaders = \
  edu.uiuc.cs.TrustBuilder2.query.policy.JessPolicyFlatFileLoader
